#!/bin/sh

get_last_argument() {
    for __last_argument; do :; done
    printf "%s" "$__last_argument"
}

is_this_a_git_lfs_command() {
    local some_string=$1
    echo "$some_string" | grep --quiet --fixed-strings "git-lfs-authenticate"
}

extract_partial_repo_url_from_git_lfs_command() {
    local lfs_command=$1
    echo "$lfs_command" | awk '{print $2}'
}

get_partial_repo_url() {
    local string_including_the_partial_repo_url=$1
    local maybe_usable_result=$(printf "%s" "$string_including_the_partial_repo_url" | sed "s/.*'\(.*\.git\)'.*/\1/")
    if is_this_a_git_lfs_command $maybe_usable_result; then
        printf "%s" $(extract_partial_repo_url_from_git_lfs_command "$maybe_usable_result")
    else
        printf "%s" "$maybe_usable_result"
    fi
}

make_temporary_public_key_file() {
    local __partial_repo_url=$1
    local __key_file=$(mktemp "/tmp/git-ssh-public-key.XXXXXX")
    if ssh-add -L | grep --fixed-strings --max-count=1 "$__partial_repo_url" > "$__key_file" && [ -s "$__key_file" ]; then
        printf "%s" "$__key_file"
    else
        printf "Failed to find an ssh key when looking for %s\n" "$__partial_repo_url" >&2
        rm -f "$__key_file" 2>/dev/null
        return 1
    fi
}

last_argument=$(get_last_argument "$@")
partial_repo_url=$(get_partial_repo_url "$last_argument")
ssh_log_file="/tmp/git-ssh-log"

if key_file=$(make_temporary_public_key_file "$partial_repo_url"); then
    trap "rm -f $key_file" EXIT
    ssh -v -i "$key_file" -E "$ssh_log_file" "$@"
else
    ssh -E "$ssh_log_file" "$@"
fi
