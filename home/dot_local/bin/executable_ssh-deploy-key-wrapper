#!/bin/sh

WRAPPER_LOG_FILE=$(mktemp --tmpdir=${TMPDIR:-$HOME} "git-ssh-wrapper-log.XXXXXX")
SSH_LOG_FILE="${TMPDIR:-$HOME}/git-ssh-log"


log() {
    if [ -n "$GIT_SSH_WRAPPER_LOG" ]; then
        echo "$1" >> "$WRAPPER_LOG_FILE"
    fi
}

get_last_argument() {
    for __last_argument; do :; done
    printf "%s" "$__last_argument"
}

get_partial_repo_url() {
    local string_including_the_partial_repo_url=$1
    local result=$(printf "%s" "$string_including_the_partial_repo_url" | grep --extended-regexp --only-matching '[-[:alnum:]_]/[-[:alnum:]_]+\.git')
    printf "%s" "$result"
}

make_temporary_public_key_file() {
    local __partial_repo_url=$1
    if [ -z "$__partial_repo_url" ]; then
        log "Not making a temporary deploy key file for there is no partial repo url"
        return 2
    fi
    local __key_file=$(mktemp "${TMPDIR:-$HOME}/git-ssh-public-key.XXXXXX")
    if ssh-add -L | grep --fixed-strings --max-count=1 "$__partial_repo_url" > "$__key_file" && [ -s "$__key_file" ]; then
        log "Deploy key found and written to $__key_file"
        printf "%s" "$__key_file"
    else
        log "Deploy key NOT FOUND"
        printf "Failed to find an ssh key when looking for %s\n" "$__partial_repo_url" >&2
        rm -f "$__key_file" 2>/dev/null
        log "Deleted empty $__key_file"
        return 1
    fi
}

write_ssh_session_header_to_log_file() {
    printf "\n" >> "$SSH_LOG_FILE"
    printf "SSH session started at $(date -Ins)\n" >> "$SSH_LOG_FILE"
    printf "PPID: %u\n" $PPID >> "$SSH_LOG_FILE"
}

log "Wrapper started at $(date -Ins)"
log "PPID: $PPID"
log "All arguments: $*"
last_argument=$(get_last_argument "$@")
log "Last argument: $last_argument"
partial_repo_url=$(get_partial_repo_url "$last_argument")
log "Partial repo url: $partial_repo_url"

write_ssh_session_header_to_log_file
if key_file=$(make_temporary_public_key_file "$partial_repo_url"); then
    trap "rm -f $key_file" EXIT
    ssh -v -i "$key_file" -E "$SSH_LOG_FILE" "$@"
else
    ssh -E "$SSH_LOG_FILE" "$@"
fi
